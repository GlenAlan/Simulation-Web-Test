/* --- Simulation Page Specific Styles --- */

/* Main container for the simulation interface. */
.simulation-area-wrapper {
    position: relative; /* Establishes a positioning context for child elements like overlays. */
    box-sizing: border-box; /* Ensures padding/border are included in the element's total width and height. */
}

/* Global CSS variables for the simulation interface. */
:root {
    --sim-panel-width: 280px; /* Default width for the simulation control panel. */
    --sim-button-offset: 5px; /* Consistent offset for buttons. Changed from 10px to 5px */
}

/* Prevent horizontal scrollbar on the page if content slightly overflows. */
html {
    overflow-x: hidden;
}

/* Controls Panel: Right-side overlay sidebar for simulation settings. */
.sim-controls-panel {
    background-color: var(--color-bg-alt);
    border-left: 1px solid var(--color-border); /* Visible border on the panel\'s inner edge. */
    padding: 1.5em;
    overflow-y: auto; /* Allows scrolling for content taller than the panel. */
    z-index: 4000; /* Ensures panel overlays other page content. */
    box-shadow: -2px 0 10px rgba(0,0,0,0.2); /* Shadow for visual depth. */
    
    position: fixed; /* Fixed position relative to the viewport. */
    right: 0;
    top: 0;        /* Default; JS may adjust based on header height in non-fullscreen mode. */
    height: 100vh; /* Default; JS may adjust based on header height in non-fullscreen mode. */
    width: var(--sim-panel-width);
    transform: translateX(100%); /* Initially off-screen to the right. */
    transition: transform 0.3s ease-out; /* Smooth slide-in/out animation. */

    /* Themed scrollbar for Firefox */
    scrollbar-width: thin;
    scrollbar-color: var(--color-accent) var(--color-bg-alt);
}

/* Themed scrollbar for WebKit browsers (Chrome, Safari, Edge) */
.sim-controls-panel::-webkit-scrollbar {
    width: 8px; /* Width of the scrollbar */
}

.sim-controls-panel::-webkit-scrollbar-track {
    background: var(--color-bg-alt); /* Background of the scrollbar track */
    border-radius: 4px;
}

.sim-controls-panel::-webkit-scrollbar-thumb {
    background-color: var(--color-accent); /* Color of the scrollbar thumb */
    border-radius: 4px; /* Roundness of the scrollbar thumb */
    border: 2px solid var(--color-bg-alt); /* Creates padding around thumb */
}

.sim-controls-panel::-webkit-scrollbar-thumb:hover {
    background-color: var(--color-accent-active); /* Darker color on hover */
}

.sim-controls-panel.panel-open {
    transform: translateX(0); /* Slides panel into view. */
}
.sim-controls-header {
    display: flex; /* Enable flexbox for alignment */
    justify-content: space-between; /* Pushes title and button to opposite ends */
    align-items: center; /* Vertically aligns items */
    margin-bottom: 1em;
    padding-bottom: 0.5em;
    border-bottom: 1px solid var(--color-border);
}
.sim-controls-header h3 {
    margin: 0;
    font-size: 1.1em;
    text-transform: uppercase;
    letter-spacing: 0.1em;
    color: var(--color-text);
}

/* Style for the new close button INSIDE the panel */
.sim-panel-close-button-insIDE {
    border: none !important; 
    outline: none !important;
    color: var(--color-text); 
    padding: 0; 
    border-radius: 8px; 
    cursor: pointer;
    line-height: 1; 
    box-shadow: none !important; 
    display: inline-flex; 
    align-items: center;    
    justify-content: center; 
    width: 44px;  
    height: 44px; 
    background-color: transparent !important;
}

.sim-panel-close-button-insIDE .icon {
    font-size: 1em; /* Example, adjust as needed */
    transition: color 0.2s ease-in-out; /* Smooth color transition for icon */
}

.sim-panel-close-button-insIDE:hover {
    /* Button itself should not change background or border on hover */
    background-color: transparent !important;
    border: none !important;
    /* color property removed from here */
}

.sim-panel-close-button-insIDE:hover .icon {
    color: var(--color-accent); /* Icon color changes on button hover */
}

html.dark-mode .sim-panel-close-button-insIDE {
    color: var(--color-text-light);
}

.sim-controls-content {
    display: flex;
    flex-direction: column;
    gap: 0.5em; /* Spacing between control elements. Reduced from 1em */
}
.sim-controls-content label {
    display: block;
    font-size: 0.9em;
    color: var(--color-text);
    margin-bottom: 0.25em;
}
.sim-controls-content label span {
    color: var(--color-accent);
    font-weight: bold;
    margin-left: 0.5em; /* Space for value display next to label. */
}
.sim-controls-content input[type="range"] {
    -webkit-appearance: none; appearance: none; height: 8px; /* Custom styling for range input. */
    background: var(--color-border); border-radius: 4px;
    outline: none; opacity: 0.9; transition: opacity .15s ease-in-out;
    width: 100%; margin-top: 0.25em;
}
.sim-controls-content input[type="range"]:hover { opacity: 1; }
.sim-controls-content input[type="range"]::-webkit-slider-thumb {
    -webkit-appearance: none; appearance: none; width: 18px; height: 18px; /* Styles for the slider thumb (WebKit/Blink). */
    background: var(--color-accent); border-radius: 50%; cursor: pointer;
    border: 2px solid var(--color-bg-alt);
}
.sim-controls-content input[type="range"]::-moz-range-thumb {
    width: 18px; height: 18px; background: var(--color-accent); /* Styles for the slider thumb (Firefox). */
    border-radius: 50%; cursor: pointer; border: 2px solid var(--color-bg-alt);
}

/* Styling for control groups and checkbox groups */
.sim-control-group {
    margin-top: 0.5em;
    padding-top: 0.5em;
    border-top: 1px solid var(--color-border);
}

.sim-control-group-label {
    display: block;
    font-size: 0.9em;
    color: var(--color-text);
    margin-bottom: 0.5em; /* Adjusted from 0.5em to provide space for button-like labels */
    font-weight: bold;
}

.sim-checkbox-group {
    display: flex;
    flex-direction: column; /* Stack checkboxes vertically */
    gap: 0.5em; /* Reduced gap from 0.75em for tighter spacing */
}

/* Hide the actual checkbox input */
.sim-checkbox-group input[type="checkbox"] {
    opacity: 0;
    position: absolute;
    width: 1px;
    height: 1px;
    margin: -1px;
    overflow: hidden;
    clip: rect(0, 0, 0, 0);
    white-space: nowrap;
    border: 0;
}

/* Style the label to look like a button */
.sim-checkbox-group label {
    display: block; /* Make label take full width in its column */
    padding: 0.45em 0.8em; /* Reduced padding from 0.65em 1em for smaller buttons */
    border: 1px solid var(--color-border);
    border-radius: 4px;
    background-color: var(--color-bg); /* Default background */
    color: var(--color-text);
    cursor: pointer;
    transition: background-color 0.2s ease-in-out, color 0.2s ease-in-out, border-color 0.2s ease-in-out;
    text-align: center;
    font-size: 0.85em; /* Slightly smaller font for button text */
    line-height: 1.5;
}

/* Hover state for the label "button" */
.sim-checkbox-group label:hover {
    border-color: var(--color-accent);
    background-color: var(--color-bg-subtle); /* Subtle background change on hover */
}

/* Styles for when the checkbox is checked (selected button) */
.sim-checkbox-group input[type="checkbox"]:checked + label {
    background-color: var(--color-accent);
    color: var(--color-text-light); /* Light text on accent background */
    border-color: var(--color-accent-active); /* Or var(--color-accent) */
}

/* Focus-visible styling for keyboard navigation accessibility */
.sim-checkbox-group input[type="checkbox"]:focus-visible + label {
    outline: 2px solid var(--color-accent);
    outline-offset: 2px;
}


/* Main content area holding the canvas and description. */
.simulation-main-content {
    width: 100%;
    min-width: 0; /* Prevents flex items from overflowing if a parent is a flex container. */
}

/* Container for the simulation canvas display. */
.simulation-display-container {
    width: 100%;
    max-width: 750px; /* Maximum width for the simulation display area. */
    margin: 0 auto 1.5em auto; /* Centers the container and adds bottom margin. */
    position: relative; /* For positioning child elements like action buttons and FPS counter. */
}

.sim-canvas-wrapper {
    width: 100%; /* Occupies full width of its parent. */
    position: relative; /* For positioning the FPS display. */
    box-sizing: border-box; /* Ensures padding/border are included in total width. */
}
.sim-aspect-ratio-box {
    position: relative;
    width: 100%;
    padding-top: calc(100% / (var(--aspect-ratio, 2 / 1))); /* Default aspect ratio */
    background-color: var(--color-bg-sub); /* Added for visual debugging if canvas fails */
    border-radius: var(--border-radius-medium);
    border: 1px solid var(--color-border);
    overflow: hidden; /* Ensures canvas stays within bounds */
}

/* General canvas scaling (re-stated for clarity or overriding, ensure it\'s intended). */
/* This rule is general and not specific to fullscreen, ensure its placement and necessity. */
.sim-canvas {
    position: absolute; top: 0; left: 0; width: 100%; height: 100%; /* Fills the aspect-ratio box. */
    display: block; /* Removes extra space below inline elements. */
    touch-action: none; /* Disables default touch behaviors like pinch-zoom on the canvas. */
    image-rendering: -webkit-optimize-contrast; /* Improves image rendering sharpness in WebKit. */
    image-rendering: crisp-edges; /* Improves image rendering sharpness. */
}

/* Info bar below the canvas for temperature display and reset button */
.sim-info-bar {
    display: flex;
    justify-content: space-between; /* Pushes stats to left, actions to right */
    align-items: center;
    padding: 0.5em 0.5em; /* Adjusted padding */
    margin-top: 0.5em;
    background-color: var(--color-bg-subtle);
    border-radius: 4px;
    border: 1px solid var(--color-border);
    flex-wrap: wrap; /* Allow wrapping on very small screens if necessary */
}

.stats-container {
    display: flex;
    gap: 0.5em; /* Space between individual stat boxes */
    align-items: center;
    flex-wrap: wrap; /* Allow stat boxes to wrap if needed */
}

.stats-box {
    font-size: 0.85em; /* Slightly smaller font for stats */
    color: var(--color-text);
    padding: 0.25em 0.5em;
    background-color: var(--color-bg);
    border-radius: 3px;
    border: 1px solid var(--color-border-subtle);
}

.stats-box strong {
    color: var(--color-text-strong); /* Or a specific color if needed */
}

.sim-info-actions {
    display: flex;
    align-items: center; /* This should vertically align the label and button */
    gap: 0.25em; /* Reduced gap between action buttons */
}

/* Styling for the "Toggle Charts" label to make it an icon button */
.sim-show-charts-label {
    border: none !important;
    outline: none !important;
    color: var(--color-text);
    padding: 0;
    border-radius: 8px;
    cursor: pointer;
    line-height: 1;
    box-shadow: none !important;
    display: inline-flex;
    align-items: center;
    justify-content: center;
    width: 44px;  /* Match other icon button size */
    height: 44px; /* Match other icon button size */
    background-color: transparent !important;
    transition: color 0.2s ease-in-out;
    margin-right: 0.25em; /* Small margin to separate from reset button */
    vertical-align: middle; /* Ensure vertical alignment */
    /* Ensure exact same box model as sim-reset-button */
    margin-top: 0;
    margin-bottom: 0;
    position: relative;
    flex-shrink: 0; /* Prevent shrinking */
}

.sim-show-charts-label .icon {
    font-size: 1em; /* Adjust icon size as needed */
    display: inline-block; /* Ensure a block-like box for transform-origin */
    transition: transform 0.5s ease-in-out; /* For potential hover effect on icon */
    transform-origin: 38% 52%; /* Explicitly set to center - same as reset button */
}

.sim-show-charts-label:hover .icon {
    color: var(--color-accent);
}

html.dark-mode .sim-show-charts-label {
    color: var(--color-text-light);
}

html.dark-mode .sim-show-charts-label:hover .icon {
    color: var(--color-accent-light);
}

/* Ensure the visually hidden checkbox remains hidden */
.visually-hidden-checkbox {
    position: absolute;
    width: 1px;
    height: 1px;
    padding: 0;
    margin: -1px;
    overflow: hidden;
    clip: rect(0, 0, 0, 0);
    white-space: nowrap;
    border: 0;
}


.sim-info-item {
    font-size: 0.9em;
    color: var(--color-text);
    margin-right: 1.5em; /* Increased spacing between info items */
}

.sim-info-item #energyVal {
    color: var(--color-accent);
    font-weight: bold;
}

/* Styling for the new Reset button, similar to panel toggle */
.sim-reset-button {
    border: none !important; 
    outline: none !important;
    color: var(--color-text); 
    padding: 0; 
    border-radius: 8px; 
    cursor: pointer;
    line-height: 1; 
    box-shadow: none !important; 
    display: inline-flex; 
    align-items: center;    
    justify-content: center; 
    width: 44px;  /* Match panel toggle button size */
    height: 44px; /* Match panel toggle button size */
    background-color: transparent !important;
    transition: color 0.2s ease-in-out; /* Smooth color transition for icon */
    vertical-align: middle; /* Ensure vertical alignment */
    /* Ensure exact same box model as sim-show-charts-label */
    margin-top: 0;
    margin-bottom: 0;
    position: relative;
    flex-shrink: 0; /* Prevent shrinking */
}

.sim-reset-button .icon {
    display: inline-block; /* Ensure a block-like box for transform-origin */
    font-size: 1em; /* Adjust icon size as needed */
    transition: transform 0.5s ease-in-out; /* For potential hover effect on icon */
    transform-origin: 38% 52%; /* Explicitly set to center */
}

.sim-reset-button:hover {
    background-color: transparent !important;
    border: none !important;
}

.sim-reset-button:hover .icon {
    color: var(--color-accent); /* Icon color changes on button hover */
    transform: rotate(180deg); /* Example hover effect: rotate icon */
}

html.dark-mode .sim-reset-button {
    color: var(--color-text-light);
}

html.dark-mode .sim-reset-button:hover .icon {
    color: var(--color-accent-light); /* Ensure hover color is appropriate for dark mode */
}


/* Overlay for action buttons (e.g., Fullscreen, Settings Toggle). */
.sim-action-buttons-overlay {
    position: fixed; /* Changed from absolute to ensure it's relative to viewport */
    top: calc(3.5em + var(--sim-button-offset)); /* Position below fixed header (approx 3.5em height) */
    right: var(--sim-button-offset);
    z-index: 10001; /* Ensure it's above the site header (typically z-index 10000) */
    display: flex;
    flex-direction: column; /* Stack buttons vertically */
    gap: 5px; /* Space between buttons for clarity */
}

/* Adjust action buttons overlay top when in simulation fullscreen (header is hidden) */
body.sim-fullscreen-active .sim-action-buttons-overlay {
    top: var(--sim-button-offset); /* Position from top of viewport */
}

/* Hide action buttons when the main site menu is visible to prevent overlap/conflict */
body.is-menu-visible .sim-action-buttons-overlay {
    display: none !important;
}

/* Hide action buttons when the control panel is open. */
body.sim-panel-active .sim-action-buttons-overlay {
    opacity: 0;
    visibility: hidden;
    /* JS no longer moves this based on panel width, so no 'right' adjustment needed here. */
}

/* Disables visual feedback (background, border, shadow) on hover for action buttons specifically within the overlay. */
/* This rule is important if the buttons have global hover styles that need to be overridden here. */
.sim-action-buttons-overlay .sim-fullscreen-toggle:hover,
.sim-action-buttons-overlay .sim-panel-toggle-button:hover {
    background-color: transparent !important; /* Keep transparent or match base style if not transparent */
    border-color: transparent !important; /* Keep transparent or match base style if not transparent */
    box-shadow: none !important; /* No shadow on hover for these specific buttons */
}

/* General styling for fullscreen and panel toggle buttons. */
/* These styles are ALREADY PRESENT and should NOT be changed as per user request */
.sim-fullscreen-toggle,
.sim-panel-toggle-button {
    border: none; 
    outline: none; /* Removes default focus outline. */
    color: var(--color-text); 
    padding: 0; /* Padding removed; size is controlled by width/height. */
    border-radius: 8px; /* Rounded corners. */
    cursor: pointer;
    line-height: 1; 
    box-shadow: none; 
    display: inline-flex; /* Enables flex item alignment for centering icon. */
    align-items: center;    /* Vertically centers the icon. */
    justify-content: center; /* Horizontally centers the icon. */
    width: 44px;  /* Fixed width for consistent button size and icon centering. */
    height: 44px; /* Fixed height for consistent button size and icon centering. */
    position: relative; /* Establishes positioning context for child elements (e.g., labels). */
}

/* Adjusts button text color for dark mode. */
/* These styles are ALREADY PRESENT and should NOT be changed */
html.dark-mode .sim-fullscreen-toggle,
html.dark-mode .sim-panel-toggle-button {
    color: var(--color-text-light);
}

/* Default hover style for toggle buttons: no visual change. */
/* These styles are ALREADY PRESENT and should NOT be changed */
.sim-fullscreen-toggle:hover,
.sim-panel-toggle-button:hover {
    background-color: transparent !important;
    border-color: transparent !important;
    box-shadow: none !important;
}

/* The following rule block is identical to a previous one for .sim-action-buttons-overlay :hover. */
/* If the previous rule is sufficient, this block may be redundant. */
/* These styles are ALREADY PRESENT and should NOT be changed */
.sim-action-buttons-overlay .sim-fullscreen-toggle:hover,
.sim-action-buttons-overlay .sim-panel-toggle-button:hover {
    background-color: transparent !important; 
    border-color: transparent !important; 
    box-shadow: none !important; 
}

/* Dark mode: Also disable visual feedback on hover for toggle buttons. */
/* These styles are ALREADY PRESENT and should NOT be changed */
html.dark-mode .sim-fullscreen-toggle:hover,
html.dark-mode .sim-panel-toggle-button:hover {
    background-color: transparent !important;
    border-color: transparent !important;
    box-shadow: none !important;
}

.sim-fullscreen-toggle .icon,
.sim-panel-toggle-button .icon {
    margin: 0; /* Resets any default margins on icon elements. */
    font-size: 1.2em; /* Icon size. */
    transition: color 0.2s ease-in-out; /* Smooth color transition on hover/state change. */
    display: flex; /* Enables flex item alignment within the icon container. */
    align-items: center; /* Vertically centers content within the icon. */
    justify-content: center; /* Horizontally centers content within the icon. */
    height: 100%; /* Icon container fills button height. */
    width: 100%; /* Icon container fills button width. */
}

/* Visually hides button labels, keeping them accessible to screen readers (sr-only technique). */
.sim-fullscreen-toggle .icon .label,
.sim-panel-toggle-button .icon .label {
    position: absolute;
    width: 1px;
    height: 1px;
    padding: 0;
    margin: -1px; /* Positions off-screen. */
    overflow: hidden;
    clip: rect(0, 0, 0, 0);
    white-space: nowrap;
    border: 0;
}

/* FPS (Frames Per Second) display styling. */
.sim-fps-display {
    position: absolute; top: 10px; left: 10px; /* Positioned at top-left of its relative parent (sim-canvas-wrapper). */
    background: rgba(0,0,0,0.7); color: #fff;
    padding: 0.25em 0.5em; border-radius: 3px;
    font-size: 0.75em; z-index: 110; /* Above canvas, below panel/buttons. */
    display: none; /* Typically shown/hidden by JavaScript. */
}

/* Styling for the simulation description area. */
.description-area {
    background-color: var(--color-bg-alt);
    padding: 1.5em; border-radius: 4px;
    border: 1px solid var(--color-border);
    max-width: 750px; /* Matches simulation display container's max-width for consistency. */
    margin: 0 auto; /* Centers the description area. */
}
.description-area h3 {
    color: var(--color-text); margin-bottom: 0.75em;
    padding-bottom: 0.5em; border-bottom: 1px solid var(--color-border);
    font-size: 1.1em; text-transform: uppercase; letter-spacing: 0.1em;
}
.description-area p { font-size: 0.95em; line-height: 1.7; }
.description-area .icon { color: var(--color-accent); }


/* --- Fullscreen Active Styles --- */
body.sim-fullscreen-active {
    overflow: hidden; /* Prevents scrolling of underlying page content when simulation is fullscreen. */
    /* Background color is inherited from <html> (handles light/dark mode). */
}

/* Hide non-simulation elements when fullscreen mode is active. */
body.sim-fullscreen-active #wrapper > header,
body.sim-fullscreen-active #wrapper > footer,
body.sim-fullscreen-active #wrapper > #menu,
body.sim-fullscreen-active #main > .inner > h1, /* Hides the main site H1. */
body.sim-fullscreen-active #main > .inner > .simulation-area-wrapper > .simulation-main-content > .description-area {
    display: none !important; /* Force hide these elements. */
}

/* Expand main content area to fill viewport in fullscreen. */
body.sim-fullscreen-active #main {
    padding: 0 !important; margin: 0 !important;
    height: 100vh; width: 100vw;
}
body.sim-fullscreen-active #main > .inner {
    padding: 0 !important; margin: 0 !important;
    max-width: none !important; /* Allow full width. */
    height: 100%; width: 100%;
    display: flex; /* Used for centering or structuring fullscreen content. */
}

/* Adjust simulation wrapper for fullscreen mode. */
body.sim-fullscreen-active .simulation-area-wrapper {
    position: static; /* Overrides 'relative' as it's no longer needed for panel positioning in this context. */
    width: 100%; height: 100%;
    display: flex; /* Allows panel and main content to be side-by-side if panel is open. */
    align-items: stretch; /* Stretches children to fill height. */
    box-sizing: border-box; /* Ensures padding/border are included in total width/height. */
}

/* When controls panel is open in fullscreen, adjust the simulation area wrapper */
body.sim-fullscreen-active.sim-panel-active .simulation-area-wrapper {
    justify-content: flex-start; /* Align content to the left */
}

/* Ensure control panel adapts correctly in fullscreen. */
body.sim-fullscreen-active .sim-controls-panel {
    /* Panel remains 'position:fixed'. These rules ensure it's correctly sized and positioned. */
    top: 0 !important; 
    height: 100vh !important;
    z-index: 4000; /* Ensures panel is above fullscreen canvas content but below action buttons. */
}

/* Apply transition to all states of simulation-main-content for smoother animation */
.simulation-main-content {
    transition: margin-right 0.3s ease-out, width 0.3s ease-out; /* Smooth transition */
}

/* When panel is open in fullscreen mode, adjust the main content to avoid overlap */
body.sim-fullscreen-active.sim-panel-active .simulation-main-content {
    margin-right: var(--sim-panel-width); /* Add margin to avoid overlap with panel */
    width: calc(100% - var(--sim-panel-width)); /* Adjust width to account for panel */
}

/* Main content area layout in fullscreen. */
body.sim-fullscreen-active .simulation-main-content {
    flex-grow: 1; /* Takes remaining space if panel is visible. */
    width: 100%; /* Occupies full available width from parent flex container. */
    height: 100%; /* Occupies full available height. */
    display: flex;
    flex-direction: column; /* Stack children (canvas container, charts) vertically */
    align-items: center; /* Center children horizontally */
    justify-content: center; /* Center the block of children vertically when no charts */
    /* Minimal padding to avoid buttons and provide breathing room */
    padding: 10px 10px 60px 10px; /* Top/sides minimal, bottom for info bar */
    box-sizing: border-box;
    position: relative;
    overflow: hidden; /* Prevent scrollbars in fullscreen mode */
}

/* When charts are visible, change layout to start from top instead of centering */
body.sim-fullscreen-active.charts-visible .simulation-main-content {
    justify-content: flex-start; /* Start from top when charts are present */
    padding-top: 20px; /* Add a bit more top padding when charts are present */
}

/* Simulation display container - now uses viewport-based sizing */
body.sim-fullscreen-active .simulation-display-container {
    /* Remove max-width constraint for fullscreen - let it use available space */
    width: 100%;
    /* Don't set height: 100% - let it size based on content and available space */
    max-width: none; /* Override the 750px limit in fullscreen */
    display: flex;
    align-items: center;
    justify-content: center;
    flex-shrink: 1; /* Allow shrinking when charts are present */
    box-sizing: border-box;
    margin: 0; /* Remove margins in fullscreen */
}

/* Canvas wrapper - uses CSS for aspect ratio calculations */
body.sim-fullscreen-active .sim-canvas-wrapper {
    /* Calculate size accounting for potential charts presence */
    /* Base calculations: subtract padding, info bar space, and potential charts space */
    width: min(
        calc(100vw - 100px), 
        calc((100vh - 140px) * var(--aspect-ratio, 2))
    );
    height: min(
        calc(100vh - 140px), 
        calc((100vw - 100px) / var(--aspect-ratio, 2))
    );
    
    /* Ensure it stays within reasonable bounds */
    max-width: calc(100vw - 50px); /* Leave space for settings panel toggle and other UI */
    max-height: calc(100vh - 120px); /* Leave space for info bar, padding, and potential charts */
    
    display: flex;
    align-items: center;
    justify-content: center;
    box-sizing: border-box;
}

/* Adjust canvas wrapper dimensions when control panel is open in fullscreen mode */
body.sim-fullscreen-active.sim-panel-active .sim-canvas-wrapper {
    /* Account for panel width in calculations */
    width: min(
        calc(100vw - 100px - var(--sim-panel-width)), 
        calc((100vh - 140px) * var(--aspect-ratio, 2))
    );
    
    /* Ensure it stays within reasonable bounds with panel open */
    max-width: calc(100vw - 50px - var(--sim-panel-width));
}

/* When charts are visible, reduce simulation height dynamically */
body.sim-fullscreen-active.charts-visible .sim-canvas-wrapper {
    /* Recalculate height accounting for charts (180px + margins ~= 200px) */
    height: min(
        calc(100vh - 340px), 
        calc((100vw - 100px) / var(--aspect-ratio, 2))
    );
    max-height: calc(100vh - 320px); /* Reserve space for charts + info bar */
}

/* Aspect ratio box - simplified for fullscreen */
body.sim-fullscreen-active .sim-aspect-ratio-box {
    /* Use full size of wrapper, let CSS aspect-ratio handle the rest */
    width: 100%;
    height: 100%;
    aspect-ratio: var(--aspect-ratio, 2);
    
    /* Remove padding-bottom trick for fullscreen */
    padding-bottom: 0 !important;
    padding-top: 0 !important;
    
    /* Maintain visual styles */
    position: relative;
    overflow: hidden;
    border-radius: var(--border-radius-medium);
    border: 1px solid var(--color-border);
    background-color: var(--color-bg-sub);
}

/* General canvas scaling (re-stated for clarity or overriding, ensure it\'s intended). */
/* This rule is general and not specific to fullscreen, ensure its placement and necessity. */
.sim-canvas {
    display: block; /* Removes extra space if it were inline. */
    width: 100%;
    height: 100%; /* Fills its parent (e.g., sim-aspect-ratio-box). */
}

/* --- Responsive Adjustments --- */
@media (max-width: 768px) { /* Styles for 'medium' screens (e.g., tablets) and smaller. */

    body.sim-fullscreen-active .sim-action-buttons-overlay {
        /* In fullscreen on small screens, JS handles fixed positioning to top right via --sim-button-offset */
        left: auto; /* Ensure it doesn't stick to 50% */
        transform: none; /* Remove translateX */
        /* top and right are set by JS based on --sim-button-offset */
    }    /* On mobile, use even less padding and more space for simulation */
    body.sim-fullscreen-active .simulation-main-content {
        padding: 5px 5px 55px 5px; /* Minimal padding on mobile */
    }
    
    body.sim-fullscreen-active .sim-canvas-wrapper {
        /* On mobile, use almost the full screen with minimal margins */
        width: min(calc(100vw - 60px), calc((100vh - 100px) * var(--aspect-ratio, 2)));
        height: min(calc(100vh - 100px), calc((100vw - 60px) / var(--aspect-ratio, 2)));
        max-width: calc(100vw - 60px);
        max-height: calc(100vh - 100px);
    }
    
    /* When charts are visible on mobile, give even less space to simulation */
    body.sim-fullscreen-active.charts-visible .sim-canvas-wrapper {
        height: min(calc(100vh - 260px), calc((100vw - 60px) / var(--aspect-ratio, 2))); /* Account for charts on mobile */
        max-height: calc(100vh - 260px);
    }

    .sim-controls-panel {
        width: 100%; /* Panel takes full width on small screens */
        border-left: none; /* No left border when full width */
        padding: 1em;
    }

    body.sim-panel-active .sim-action-buttons-overlay {
        opacity: 0; /* Ensure it's hidden */
        visibility: hidden; /* Ensure it's hidden and not focusable */
    }
}

/* Styles for the info bar in fullscreen mode */
.sim-info-bar.fullscreen-style {
    position: fixed;
    bottom: 0;
    left: 0;
    width: 100%;
    background-color: var(--color-bg-subtle); /* Changed from --color-bg-tertiary */
    padding: 8px 15px;
    box-shadow: 0 -2px 5px rgba(0,0,0,0.1);
    z-index: 1005; /* Ensure it's above other fullscreen content but below modals/menus if any */
    display: flex;
    justify-content: space-between;
    align-items: center;
    border-top: 1px solid var(--color-border-subtle);
}

html.dark-mode .sim-info-bar.fullscreen-style {
    /* background-color is now handled by --color-bg-subtle which adapts to dark mode */
    border-top: 1px solid var(--color-border-subtle-dark);
}

/* Hide the default (non-fullscreen) sim-info-bar when in fullscreen, as .fullscreen-style one is used */
body.sim-fullscreen-active .simulation-display-container > .sim-info-bar:not(.fullscreen-style) {
    display: none !important;
}

/* Charts container in fullscreen */
body.sim-fullscreen-active #charts-container {
    /* display property is handled by JS (block/none) based on checkbox. */
    /* These styles apply when it's made visible by JS. */
    width: 100%; /* Takes width from parent's flex column context */
    max-width: 800px; /* Respects original max-width, will be centered by parent's align-items */
    margin-top: 10px; /* Spacing from the simulation display container above */
    margin-bottom: 10px; /* Add bottom margin to prevent overlap with info bar */
    flex-shrink: 0; /* Its height is determined by its content (.chart-box) */
    position: relative; /* Ensure proper positioning */
    z-index: 1; /* Stay above other elements */
}

/* Styling for the individual chart boxes within the container in fullscreen */
body.sim-fullscreen-active #charts-container .chart-box {
    /* Inline styles already define width: 48%, position, padding, border-radius. */
    /* Override height and background for fullscreen consistency. */
    height: 150px; /* Reduced from 180px to fit better and leave more space */
    background-color: var(--color-bg-alt); 
}

html.dark-mode .sim-info-bar.fullscreen-style .sim-info-item,
html.dark-mode .sim-info-bar.fullscreen-style .sim-reset-button {
    color: var(--color-text-primary-dark); /* Ensure text is visible in dark mode */
}

/* Ensure the reset button in fullscreen info bar maintains its icon color */
.sim-info-bar.fullscreen-style .sim-reset-button .icon {
    color: var(--color-accent); /* Or specific color for icons */
}

html.dark-mode .sim-info-bar.fullscreen-style .sim-reset-button .icon {
    color: var(--color-accent-dark); /* Or specific color for icons in dark mode */
}